# -*- coding: utf-8 -*-
"""gpt API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U5O5EjxzEpMgqHi9SlFsXdi8g0LTKNRX
"""

!pip install --upgrade pip
!pip install openai
import openai
import os

from openai import OpenAI  # OpenAI 모듈 불러오기

# OpenAI API 키 설정
client = OpenAI(api_key='API key')


import time

# BookClubGPT 클래스 정의: 독서 모임을 진행하고, GPT-4o 모델을 사용해 발제문 생성 및 모임 요약을 처리
class BookClubGPT:

    ## 클래스 초기화
    def __init__(self, participants_responses):
        """
        클래스 초기화 메서드.
        participants_responses: 참가자들이 제출한 감상문 리스트.
        """

        self.topics = []  # GPT-4o로 생성된 토론 주제를 저장할 리스트
        self.participants_responses = participants_responses  # 참가자들의 감상문 저장

    ## 발제문 생성
    def generate_topics(self):
        """
        GPT-4o 모델을 사용해 발제문(토론 주제)을 생성하는 메서드
        참가자들이 제출한 감상문을 바탕으로 3개의 발제문을 생성
        """

        # 시스템 메시지: GPT에게 역할을 설명 (독서 모임 진행자 역할)
        system_message = "너는 독서모임의 진행자야. 사용자들이 제출한 감상문을 바탕으로 발제문 3개를 선정해줘. 찬반이 확실히 갈리지 않고 자유롭게 의견을 나눌 수 있는 주제로 선정해줘."

        # 사용자 메시지: 참가자들의 감상문을 하나의 문자열로 결합하여 GPT에게 전달
        user_message = "\n".join(self.participants_responses)

        # GPT-4o API 호출하여 발제문 생성 (최신 API 형식 사용)
        response = client.chat.completions.create(
            model="gpt-4",  # 사용할 모델 지정 (gpt-4)
            messages=[
                {"role": "system", "content": system_message},  # 시스템 메시지 (역할 설명)
                {"role": "user", "content": user_message}  # 사용자 메시지 (참가자들의 감상문)
            ]
        )

        # GPT-4o로부터 받은 응답에서 발제문 추출 (줄바꿈으로 구분된 발제문 리스트)
        self.topics = response.choices[0].message.content.split("\n")

        # 선정된 발제문 출력
        print("선정된 발제문:")
        for topic in self.topics:
            print(f"- {topic}")

    ## 의견 수집
    def collect_responses(self, topic):
        """
        주어진 주제에 대해 참가자들의 의견을 수집하고, 욕설 및 비방 내용을 필터링하는 메서드
        """
        print(f'\n주제: {topic}')  # 현재 토론 주제를 출력
        print('이 주제에 대해 의견을 7분 동안 작성해 주세요.')  # 사용자에게 의견 작성 요청

        # 예시 사용자 응답 수집 (실제로는 사용자 입력이 필요함)
        responses = [
            '사용자1: 1984는 전체주의의 위험성을 잘 보여주는 작품입니다.',
            '사용자2: 이 소설은 너무 비관적이에요. 현실과는 거리가 멀다고 생각합니다.',
            '사용자3: 욕설을 포함한 의견...',  # 욕설 포함된 의견 예시
            '사용자4: 이 작품은 인간의 자유와 권리를 생각하게 해줘요.'
        ]

        # 필터링된 응답 처리 (욕설 및 비방 내용 제거)
        filtered_responses = self.filter_responses(responses)

        # 필터링된 의견 출력
        print('필터링된 의견:')
        for response in filtered_responses:
            print(response)

        return filtered_responses  # 필터링된 응답 반환

    ## 필터링
    def filter_responses(self, responses):
        """
        참가자들의 응답에서 욕설이나 비방이 포함된 내용을 필터링하는 메서드.
        """
        bad_words = ['욕설', '비방']  # 필터링할 단어 목록
        filtered = []  # 필터링된 응답을 저장할 리스트

        for response in responses:
            # 응답에 필터링할 단어가 포함되지 않은 경우만 리스트에 추가
            if not any(bad_word in response for bad_word in bad_words):
                filtered.append(response)

        return filtered  # 필터링된 응답 리스트 반환

    ## 자유토론
    def free_discussion(self):
        """
        자유 토론 시간을 제공하는 메서드. 실제로는 10분 동안 대기하지만, 테스트를 위해 짧게 설정됨.
        """
        print('이제 자유 토의 시간입니다. 10분 동안 의견을 나누세요.')

        # 실제로는 time.sleep(600)으로 10분 대기해야 하지만, 테스트를 위해 짧게 설정함.
        time.sleep(1)  # 테스트용 대기 시간

        print('자유 토의 시간 종료.')  # 자유 토론 종료 알림

    ## 모임 내용 요약
    def summarize_meeting(self):
        """
        GPT-4o 모델을 사용해 모임 내용을 요약하는 메서드
        모든 주제가 끝난 후, 논의된 내용을 요약하여 출력
        """

        print('\n모임 내용을 요약합니다...')

        # GPT-4o에게 전달할 요약 요청 프롬프트 생성 (참가자들의 논의 내용 포함)
        summary_prompt = "다음은 독서 모임에서 논의된 내용입니다. 이 내용을 바탕으로 간단한 요약을 작성해줘:\n"

        for topic_data in self.participants_responses:
            summary_prompt += f"{topic_data}\n"

        # GPT-4o API 호출하여 요약 생성 (최신 API 형식 사용)
        response = client.chat.completions.create(
            model="gpt-4",  # 사용할 모델 지정 (gpt-4)
            messages=[
                {"role": "system", "content": "너는 독서모임의 진행자야. 독서모임에서 논의된 내용을 요약해줘."},  # 시스템 메시지 (역할 설명)
                {"role": "user", "content": summary_prompt}  # 사용자 메시지 (논의된 내용)
            ]
        )

        # GPT-4o로부터 받은 요약 추출
        summary = response.choices[0].message.content

        print("모임 요약:")  # 요약 출력
        print(summary)

# 참여자들의 감상문 (예시 데이터). 실제로는 사용자 입력이 필요함.
participants_responses = [
    '참여자 1: 조지 오웰의 1984는 전체주의 체제의 위험성을 강력하게 경고하는 작품이다...',
    '참여자 2: 1984에서 당은 진실과 정보를 철저히 통제하며, 이를 통해 사회를 지배한다...',
    '참여자 3: 소설 속 오세아니아 사회에서는 개인의 정체성이 철저히 억압된다...',
    '참여자 4: 1984에서 사랑과 인간성은 가장 강력한 저항의 형태로 그려진다...'
]

## 테스트
# 독서 모임 시작 - BookClubGPT 인스턴스 생성 및 실행
book_club_gpt = BookClubGPT(participants_responses)

# 발제문 생성 및 주제별 토론 진행
book_club_gpt.generate_topics()  # GPT-4o를 사용해 발제문 생성

for topic in book_club_gpt.topics:
    responses = book_club_gpt.collect_responses(topic)  # 각 주제에 대한 의견 수집 및 필터링
    book_club_gpt.free_discussion()  # 자유 토론 시간 부여

# 모임 내용 요약 - 모든 주제가 끝난 후 논의 내용 요약
book_club_gpt.summarize_meeting()
